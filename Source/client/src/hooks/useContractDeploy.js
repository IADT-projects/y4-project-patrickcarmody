import { ethers } from "ethers";
import { useState, useEffect } from "react";
import { useSigner } from "wagmi";

import ContractABI from '../assets/abi/Crowdfunding.json'
const bytecode = '608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610659806100606000396000f3fe60806040526004361061007b5760003560e01c806342e94c901161004e57806342e94c901461012a5780637d88209714610167578063d0e30db014610192578063f77c47911461019c5761007b565b8063168a48221461008057806321eff7fc146100ab5780633018205f146100e85780633ccfd60b14610113575b600080fd5b34801561008c57600080fd5b506100956101c7565b6040516100a2919061040c565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd919061048a565b6101d1565b6040516100df919061040c565b60405180910390f35b3480156100f457600080fd5b506100fd61021a565b60405161010a91906104c6565b60405180910390f35b34801561011f57600080fd5b50610128610243565b005b34801561013657600080fd5b50610151600480360381019061014c919061048a565b610340565b60405161015e919061040c565b60405180910390f35b34801561017357600080fd5b5061017c610358565b604051610189919061040c565b60405180910390f35b61019a61035e565b005b3480156101a857600080fd5b506101b16103cf565b6040516101be9190610502565b60405180910390f35b6000600154905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c8906105a0565b60405180910390fd5b600047905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561033c573d6000803e3d6000fd5b5050565b60026020528060005260406000206000915090505481565b60015481565b346001600082825461037091906105ef565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103c691906105ef565b92505081905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b610406816103f3565b82525050565b600060208201905061042160008301846103fd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104578261042c565b9050919050565b6104678161044c565b811461047257600080fd5b50565b6000813590506104848161045e565b92915050565b6000602082840312156104a05761049f610427565b5b60006104ae84828501610475565b91505092915050565b6104c08161044c565b82525050565b60006020820190506104db60008301846104b7565b92915050565b60006104ec8261042c565b9050919050565b6104fc816104e1565b82525050565b600060208201905061051760008301846104f3565b92915050565b600082825260208201905092915050565b7f4f6e6c792074686520636f6e74726f6c6c65722063616e20776974686472617760008201527f2066756e64730000000000000000000000000000000000000000000000000000602082015250565b600061058a60268361051d565b91506105958261052e565b604082019050919050565b600060208201905081810360008301526105b98161057d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105fa826103f3565b9150610605836103f3565b925082820190508082111561061d5761061c6105c0565b5b9291505056fea2646970667358221220337646851267a138ba47262265aa98959452cb30ac3b39b2208520704ff222fc64736f6c63430008120033';

const useContractDeploy = () => {

    const [data, setData] = useState({});
    const {data: signer} = useSigner();
    const [loading, setLoading] = useState(false);
    
    useEffect(() => {
        setData(prevState => ({
            ...prevState,
            signer: signer
        }))
    }, [signer]);

    const contractFactory = new ethers.ContractFactory(ContractABI, bytecode, signer);

    const deployContract = async () => {
        setLoading(true);
        try {
          const contract = await contractFactory.deploy();
          setData((prevState) => ({
            ...prevState,
            deployedAt: contract.deployTransaction.hash,
          }));
          
          // Wait for the transaction to be confirmed
          await contract.deployTransaction.wait();
          
          setData((prevState) => ({
            ...prevState,
            deployedAt: contract.address,
          }));
          
          setLoading(false);
          
          return contract;
        } catch (error) {
          console.error(error);
          setLoading(false);
          setData((prevState) => ({
            ...prevState,
            error: error.message || 'Transaction rejected by user',
          }));
        }
      };
      
    return({
        deployContract,
        loading,
        data,
        deployContractWithPromise: async () => {
            const contract = await deployContract();
            return contract.address;
        }
    })
}

export default useContractDeploy;